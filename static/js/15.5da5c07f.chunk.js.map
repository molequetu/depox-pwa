{"version":3,"sources":["pages/Dashboard/Timeline.js","pages/Dashboard/StockMovements.js"],"names":["useStyles","makeStyles","theme","paper","padding","secondaryTail","backgroundColor","palette","secondary","main","StockTimeline","props","classes","Timeline","align","stocks","map","stock","TimelineItem","TimelineOppositeContent","Typography","variant","color","date","createdAt","Date","toLocaleTimeString","TimelineSeparator","actionType","TimelineDot","TimelineConnector","TimelineContent","Paper","elevation","className","component","item","code","bin","quantity","id","useState","movements","setMovements","intl","useIntl","dbPromise","window","openDB","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","createIndexedDB","getStockMovements","a","fetch","config","apiURL","then","response","console","log","json","data","saveStockDataLocally","catch","error","getLocalStockData","offlineData","length","tx","transaction","store","objectStore","Promise","all","movement","put","abort","Error","getAll","useEffect","pageTitle","formatMessage","defaultMessage"],"mappings":"qUAgBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,QAAS,YAEXC,cAAe,CACbC,gBAAiBJ,EAAMK,QAAQC,UAAUC,UAI9B,SAASC,EAAcC,GACpC,IAAMC,EAAUZ,IAMhB,OACE,cAACa,EAAA,EAAD,CAAUC,MAAM,YAAhB,SACGH,EAAMI,QACLJ,EAAMI,OAAOC,KAAI,SAACC,GAAD,OACf,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAlC,UAVOC,EAWMN,EAAMO,UAVpB,IAAIC,KAAKF,GAAMG,0BAahB,eAACC,EAAA,EAAD,WAC2B,IAArBV,EAAMW,WAAmB,eAACC,EAAA,EAAD,CAAaP,MAAM,UAAnB,cAA8B,cAAC,IAAD,IAA9B,OACxB,cAACO,EAAA,EAAD,CAAaP,MAAM,YAAnB,SAA+B,cAAC,IAAD,MAEpC,cAACQ,EAAA,EAAD,OAEF,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAGC,UAAWtB,EAAQT,MAAxC,SACE,eAACiB,EAAA,EAAD,CAAYC,QAAQ,KAAKc,UAAU,KAAnC,UACClB,EAAMmB,KAAKC,KADZ,WAC0BpB,EAAMqB,IAAID,KADpC,MAC6CpB,EAAMsB,kBAftCtB,EAAMuB,IARjC,IAAmBjB,O,sBCpBN,qBAAa,IAAD,EACSkB,mBAAS,MADlB,mBAClBC,EADkB,KACPC,EADO,KAEnBC,EAAOC,cAEPC,EA0BN,WACE,KAAM,cAAeC,QAAU,OAAO,KACtC,OAAOC,YAAO,OAAQ,EAAG,CACvBC,QADuB,SACfC,GACN,IAAKA,EAAGC,iBAAiBC,SAAS,kBACHF,EAAGG,kBAAkB,iBAAmB,CAACC,QAAS,UA/BrEC,GAEZC,EAAiB,uCAAG,sBAAAC,EAAA,sDACxBC,MAAM,GAAD,OAAIC,IAAOC,OAJD,WAKZC,MAAK,SAAAC,GAAqC,OAAvBC,QAAQC,IAAIF,GAAkBA,EAASG,UAC1DJ,MAAK,SAAAK,GACJvB,EAAauB,GACbC,EAAqBD,MAEtBE,OAAM,SAACC,GACNN,QAAQM,MAAM,sEAAuEA,GACrFC,IACCT,MAAK,SAAAU,GACCA,EAAYC,QAGf7B,EAAa4B,SAdG,2CAAH,qDAmCvB,SAASJ,EAAqBpD,GAC5B,MAAM,cAAegC,OACdD,EAAUe,MAAK,SAAAX,GACpB,IAAMuB,EAAKvB,EAAGwB,YAAY,iBAAkB,aACtCC,EAAQF,EAAGG,YAAY,kBAC7B,OAAOC,QAAQC,IAAI/D,EAAOC,KAAI,SAAA+D,GAAQ,OAAIJ,EAAMK,IAAID,OACnDX,OAAM,WAEL,MADAK,EAAGQ,QACGC,MAAM,qDAPsB,KAYxC,SAASZ,IACP,MAAM,cAAevB,OACdD,EAAUe,MAAK,SAAAX,GAGpB,OAFWA,EAAGwB,YAAY,iBAAkB,YAC3BE,YAAY,kBAChBO,YAJuB,KAQxC,OArCAC,qBAAU,WACR5B,MACC,IAoCD,cAAC,IAAD,CACE6B,UAAWzC,EAAK0C,cAAc,CAAE9C,GAAI,iBAAkB+C,eAAgB,oBADxE,SAGE,cAAC,IAAD,UACE,cAAC7E,EAAD,CAAeK,OAAU2B","file":"static/js/15.5da5c07f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Timeline from \"@material-ui/lab/Timeline\";\r\nimport TimelineItem from \"@material-ui/lab/TimelineItem\";\r\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\r\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\";\r\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\r\nimport TimelineOppositeContent from \"@material-ui/lab/TimelineOppositeContent\";\r\nimport TimelineDot from \"@material-ui/lab/TimelineDot\";\r\nimport AddToQueueIcon from '@material-ui/icons/AddToQueue';\r\nimport RemoveFromQueueIcon from '@material-ui/icons/RemoveFromQueue';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    padding: \"6px 16px\"\r\n  },\r\n  secondaryTail: {\r\n    backgroundColor: theme.palette.secondary.main\r\n  }\r\n}));\r\n\r\nexport default function StockTimeline(props) {\r\n  const classes = useStyles();\r\n\r\n  function parseDate(date) {\r\n      return new Date(date).toLocaleTimeString();\r\n  }\r\n\r\n  return (\r\n    <Timeline align=\"alternate\">\r\n      {props.stocks &&\r\n        props.stocks.map((stock) => (\r\n          <TimelineItem key={stock.id}>\r\n            <TimelineOppositeContent>\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {parseDate(stock.createdAt)}\r\n              </Typography>\r\n            </TimelineOppositeContent>\r\n            <TimelineSeparator>\r\n                 {stock.actionType === 0 ? <TimelineDot color=\"primary\"> <ArrowDownwardIcon/> </TimelineDot>\r\n                  :<TimelineDot color=\"secondary\"><ArrowUpwardIcon/></TimelineDot>\r\n                  }\r\n              <TimelineConnector />\r\n            </TimelineSeparator>\r\n            <TimelineContent>\r\n              <Paper elevation={3} className={classes.paper}>\r\n                <Typography variant=\"h6\" component=\"h1\">\r\n                {stock.item.code} &rarr; {stock.bin.code} : {stock.quantity}\r\n                </Typography>\r\n\r\n              </Paper>\r\n            </TimelineContent>\r\n          </TimelineItem>\r\n        ))}\r\n    </Timeline>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport Page from 'material-ui-shell/lib/containers/Page'\r\nimport Scrollbar from 'material-ui-shell/lib/components/Scrollbar'\r\nimport StockTimeline from './Timeline'\r\nimport config from \"config/config\"\r\nimport { openDB } from 'idb';\r\n\r\nexport default function () {\r\n  const [movements, setMovements] = useState(null)\r\n  const intl = useIntl()\r\n  const endpoint = \"Stocks\"\r\n  const dbPromise = createIndexedDB();\r\n\r\n  const getStockMovements = async () => {\r\n    fetch(`${config.apiURL + endpoint}`)\r\n      .then(response => { console.log(response); return response.json()})\r\n      .then(data => {\r\n        setMovements(data);\r\n        saveStockDataLocally(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error while getting stock movements, will render local stored data:', error);\r\n        getLocalStockData()\r\n        .then(offlineData => {\r\n          if (!offlineData.length) {\r\n            return;\r\n          } else {\r\n            setMovements(offlineData);\r\n          }\r\n        });\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getStockMovements()\r\n  }, [])\r\n\r\n  function createIndexedDB() {\r\n    if (!('indexedDB' in window)) {return null;}\r\n    return openDB('depo', 1, {\r\n      upgrade(db) {\r\n        if (!db.objectStoreNames.contains('stockMovements')) {\r\n          const stockMovementsStore =  db.createObjectStore('stockMovements',  {keyPath: 'id'});\r\n        }\r\n      },\r\n    });\r\n  }\r\n  \r\n  function saveStockDataLocally(stocks) {\r\n    if (!('indexedDB' in window)) {return null;}\r\n    return dbPromise.then(db => {\r\n      const tx = db.transaction('stockMovements', 'readwrite');\r\n      const store = tx.objectStore('stockMovements');\r\n      return Promise.all(stocks.map(movement => store.put(movement)))\r\n      .catch(() => {\r\n        tx.abort();\r\n        throw Error('Stock movements were not added to the store');\r\n      });\r\n    });\r\n  }\r\n  \r\n  function getLocalStockData() {\r\n    if (!('indexedDB' in window)) {return null;}\r\n    return dbPromise.then(db => {\r\n      const tx = db.transaction('stockMovements', 'readonly');\r\n      const store = tx.objectStore('stockMovements');\r\n      return store.getAll();\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Page\r\n      pageTitle={intl.formatMessage({ id: 'stockmovements', defaultMessage: 'Stock Movements' })}\r\n    >\r\n      <Scrollbar>\r\n        <StockTimeline stocks = {movements} />\r\n      </Scrollbar>\r\n    </Page>\r\n  )\r\n}\r\n"],"sourceRoot":""}