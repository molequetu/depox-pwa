{"version":3,"sources":["config/locales/index.js","config/routes.js","config/themes.js","config/menuItems.js","config/config.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["locales","locale","messages","SignIn","lazy","SignUp","PasswordReset","Import","Export","Dashboard","routes","path","redirectTo","exact","component","themes","id","color","red","source","palette","primary","secondary","pink","error","green","getMenuItems","props","intl","updateLocale","menuContext","themeContext","a2HSContext","authData","auth","isDesktop","isAuthMenuOpen","useMiniMode","setMiniMode","themeID","setThemeID","setAuth","isAppInstallable","isAppInstalled","deferredPrompt","localeItems","allLocales","map","l","value","undefined","visible","primaryText","formatMessage","onClick","leftIcon","isAuthorised","isAuthenticated","themeItems","allThemes","t","style","divider","primaryTogglesNestedList","nestedItems","secondaryText","prompt","defaultMessage","config","signInURL","defaultLocale","parseLanguages","onError","e","menu","theme","defaultThemeID","defaultType","pages","LandingPage","PageNotFound","merge","MUIConfig","_config","Demo","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d5cd62dd.chunk.js","sourcesContent":["const locales = [\r\n  {\r\n    locale: 'en',\r\n    messages: import('./en'),\r\n    //loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/en`),\r\n  },\r\n  {\r\n    locale: 'ru',\r\n    messages: import('./ru'),\r\n    //loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/ru`),\r\n  },\r\n  {\r\n    locale: 'de',\r\n    messages: import('./de'),\r\n    //loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/de`),\r\n  },\r\n]\r\n\r\nexport default locales\r\n","/* eslint-disable react/jsx-key */\r\nimport React, { lazy } from 'react'\r\nimport AuthorizedRoute from 'base-shell/lib/components/AuthorizedRoute/AuthorizedRoute'\r\nimport UnauthorizedRoute from 'base-shell/lib/components/UnauthorizedRoute/UnauthorizedRoute'\r\nimport { Route } from 'react-router-dom'\r\n\r\nconst SignIn = lazy(() => import('../pages/SignIn/SignIn'))\r\nconst SignUp = lazy(() => import('../pages/SignUp/SignUp'))\r\nconst PasswordReset = lazy(() => import('../pages/PasswordReset/PasswordReset'))\r\nconst About = lazy(() => import('../pages/About'))\r\nconst Home = lazy(() => import('../pages/Home/Home'))\r\nconst DialogDemo = lazy(() => import('../pages/DialogDemo/DialogDemo'))\r\nconst ToastDemo = lazy(() => import('../pages/ToastDemo/ToastDemo'))\r\nconst FilterDemo = lazy(() => import('../pages/FilterDemo'))\r\nconst ListPageDemo = lazy(() => import('../pages/ListPageDemo'))\r\nconst TabsDemo = lazy(() => import('../pages/TabsDemo'))\r\n\r\nconst Import = lazy(() => import('../pages/Import/Import'))\r\nconst Export = lazy(() => import('../pages/Export/Export'))\r\nconst Dashboard = lazy(() => import('../pages/Dashboard/StockMovements'))\r\n\r\nconst routes = [\r\n  <UnauthorizedRoute path=\"/signin\" redirectTo=\"/\" exact component={SignIn} />,\r\n  <UnauthorizedRoute path=\"/signup\" redirectTo=\"/\" exact component={SignUp} />,\r\n  <UnauthorizedRoute\r\n    path=\"/password_reset\"\r\n    redirectTo=\"/\"\r\n    exact\r\n    component={PasswordReset}\r\n  />,\r\n  // <AuthorizedRoute path=\"/home\" exact component={Home} />,\r\n  <AuthorizedRoute path=\"/dashboard\" exact component={Dashboard} />,\r\n  <AuthorizedRoute path=\"/import\" exact component={Import} />,\r\n  <AuthorizedRoute path=\"/export\" exact component={Export} />,\r\n /*  <AuthorizedRoute path=\"/dialog_demo\" exact component={DialogDemo} />,\r\n  <AuthorizedRoute path=\"/toast_demo\" exact component={ToastDemo} />,\r\n  <AuthorizedRoute path=\"/filter_demo\" exact component={FilterDemo} />,\r\n  <AuthorizedRoute path=\"/list_page_demo\" exact component={ListPageDemo} />,\r\n  <AuthorizedRoute path=\"/tabs_demo\" exact component={TabsDemo} />, */\r\n]\r\n\r\nexport default routes\r\n","import red from '@material-ui/core/colors/red'\r\nimport pink from '@material-ui/core/colors/pink'\r\nimport green from '@material-ui/core/colors/green'\r\n\r\nconst themes = [\r\n  {\r\n    id: 'default',\r\n  },\r\n  {\r\n    id: 'red',\r\n    color: red[500],\r\n    source: {\r\n      palette: {\r\n        primary: red,\r\n        secondary: pink,\r\n        error: red,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    id: 'green',\r\n    color: green[500],\r\n    source: {\r\n      palette: {\r\n        primary: green,\r\n        secondary: red,\r\n        error: red,\r\n      },\r\n    },\r\n  },\r\n]\r\n\r\nexport default themes\r\n","import ChatBubble from '@material-ui/icons/ChatBubble'\r\nimport ChromeReaderMode from '@material-ui/icons/ChromeReaderMode'\r\nimport DaschboardIcon from '@material-ui/icons/Dashboard'\r\nimport ImportExportIcon from '@material-ui/icons/ImportExport';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\r\nimport FilterList from '@material-ui/icons/FilterList'\r\nimport GetApp from '@material-ui/icons/GetApp'\r\nimport InfoOutlined from '@material-ui/icons/InfoOutlined'\r\nimport LanguageIcon from '@material-ui/icons/Language'\r\nimport LockIcon from '@material-ui/icons/Lock'\r\nimport MenuOpenIcon from '@material-ui/icons/MenuOpen'\r\nimport QuestionAnswer from '@material-ui/icons/QuestionAnswer'\r\nimport React from 'react'\r\nimport SettingsIcon from '@material-ui/icons/SettingsApplications'\r\nimport StyleIcon from '@material-ui/icons/Style'\r\nimport Tab from '@material-ui/icons/Tab'\r\nimport ViewList from '@material-ui/icons/ViewList'\r\nimport Web from '@material-ui/icons/Web'\r\nimport allLocales from './locales'\r\nimport allThemes from './themes'\r\n\r\nconst getMenuItems = (props) => {\r\n  const {\r\n    intl,\r\n    updateLocale,\r\n    locale,\r\n    menuContext,\r\n    themeContext,\r\n    a2HSContext,\r\n    auth: authData,\r\n  } = props\r\n  const { isDesktop, isAuthMenuOpen, useMiniMode, setMiniMode } = menuContext\r\n  const { themeID, setThemeID } = themeContext\r\n  const { auth, setAuth } = authData\r\n  const { isAppInstallable, isAppInstalled, deferredPrompt } = a2HSContext\r\n\r\n  const localeItems = allLocales.map((l) => {\r\n    return {\r\n      value: undefined,\r\n      visible: true,\r\n      primaryText: intl.formatMessage({ id: l.locale }),\r\n      onClick: () => {\r\n        updateLocale(l.locale)\r\n      },\r\n      leftIcon: <LanguageIcon />,\r\n    }\r\n  })\r\n\r\n  const isAuthorised = auth.isAuthenticated\r\n\r\n  const themeItems = allThemes.map((t) => {\r\n    return {\r\n      value: undefined,\r\n      visible: true,\r\n      primaryText: intl.formatMessage({ id: t.id }),\r\n      onClick: () => {\r\n        setThemeID(t.id)\r\n      },\r\n      leftIcon: <StyleIcon style={{ color: t.color }} />,\r\n    }\r\n  })\r\n\r\n  if (isAuthMenuOpen || !isAuthorised) {\r\n    return [\r\n      {\r\n        value: '/signin',\r\n        onClick: isAuthorised\r\n          ? () => {\r\n              setAuth({ isAuthenticated: false })\r\n            }\r\n          : () => {},\r\n        visible: true,\r\n        primaryText: isAuthorised\r\n          ? intl.formatMessage({ id: 'sign_out' })\r\n          : intl.formatMessage({ id: 'sign_in' }),\r\n        leftIcon: isAuthorised ? <ExitToAppIcon /> : <LockIcon />,\r\n      },\r\n    ]\r\n  }\r\n  return [\r\n /*    {\r\n      value: '/home',\r\n      visible: isAuthorised,\r\n      primaryText: intl.formatMessage({ id: 'home' }),\r\n      leftIcon: <DaschboardIcon />,\r\n    }, */\r\n    {\r\n      value: '/dashboard',\r\n      visible: isAuthorised,\r\n      primaryText: intl.formatMessage({ id: 'dashboard' }),\r\n      leftIcon: <DaschboardIcon />,\r\n    },\r\n    {\r\n      value: '/import',\r\n      visible: isAuthorised,\r\n      primaryText: intl.formatMessage({ id: 'import' }),\r\n      leftIcon: <ImportExportIcon />,\r\n    },\r\n    {\r\n      value: '/export',\r\n      visible: isAuthorised,\r\n      primaryText: intl.formatMessage({ id: 'export' }),\r\n      leftIcon: <ImportExportIcon />,\r\n    },\r\n    /* {\r\n      primaryText: intl.formatMessage({ id: 'demos', defaultMessage: 'Demos' }),\r\n      primaryTogglesNestedList: true,\r\n      leftIcon: <Web />,\r\n      nestedItems: [\r\n        {\r\n          value: '/dialog_demo',\r\n          visible: isAuthorised,\r\n          primaryText: intl.formatMessage({\r\n            id: 'dialog_demo',\r\n            defaultMessage: 'Dialog',\r\n          }),\r\n          leftIcon: <ChatBubble />,\r\n        },\r\n        {\r\n          value: '/toast_demo',\r\n          visible: isAuthorised,\r\n          primaryText: intl.formatMessage({\r\n            id: 'toast_demo',\r\n            defaultMessage: 'Toast',\r\n          }),\r\n          leftIcon: <QuestionAnswer />,\r\n        },\r\n        {\r\n          value: '/filter_demo',\r\n          visible: isAuthorised,\r\n          primaryText: intl.formatMessage({\r\n            id: 'filter_demo',\r\n            defaultMessage: 'Filter',\r\n          }),\r\n          leftIcon: <FilterList />,\r\n        },\r\n        {\r\n          value: '/list_page_demo',\r\n          visible: isAuthorised,\r\n          primaryText: intl.formatMessage({\r\n            id: 'list_page_demo_menu',\r\n            defaultMessage: 'List Page',\r\n          }),\r\n          leftIcon: <ViewList />,\r\n        },\r\n        {\r\n          value: '/tabs_demo',\r\n          visible: isAuthorised,\r\n          primaryText: intl.formatMessage({\r\n            id: 'tabs_demo',\r\n            defaultMessage: 'Tabs Page',\r\n          }),\r\n          leftIcon: <Tab />,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      value: '/about',\r\n      visible: true,\r\n      primaryText: intl.formatMessage({ id: 'about' }),\r\n      leftIcon: <InfoOutlined />,\r\n    }, */\r\n    { divider: true },\r\n    {\r\n      primaryText: intl.formatMessage({ id: 'settings' }),\r\n      primaryTogglesNestedList: true,\r\n      leftIcon: <SettingsIcon />,\r\n      nestedItems: [\r\n        {\r\n          primaryText: intl.formatMessage({ id: 'theme' }),\r\n          secondaryText: intl.formatMessage({ id: themeID }),\r\n          primaryTogglesNestedList: true,\r\n          leftIcon: <StyleIcon />,\r\n          nestedItems: themeItems,\r\n        },\r\n        {\r\n          primaryText: intl.formatMessage({ id: 'language' }),\r\n          secondaryText: intl.formatMessage({ id: locale }),\r\n          primaryTogglesNestedList: true,\r\n          leftIcon: <LanguageIcon />,\r\n          nestedItems: localeItems,\r\n        },\r\n        {\r\n          visible: isDesktop ? true : false,\r\n          onClick: () => {\r\n            setMiniMode(!useMiniMode)\r\n          },\r\n          primaryText: intl.formatMessage({\r\n            id: 'menu_mini_mode',\r\n          }),\r\n          leftIcon: useMiniMode ? <MenuOpenIcon /> : <ChromeReaderMode />,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      value: null,\r\n      visible: isAppInstallable && !isAppInstalled,\r\n      onClick: () => {\r\n        deferredPrompt.prompt()\r\n      },\r\n      primaryText: intl.formatMessage({\r\n        id: 'install',\r\n        defaultMessage: 'Install',\r\n      }),\r\n      leftIcon: <GetApp />,\r\n    },\r\n  ]\r\n}\r\nexport default getMenuItems\r\n","import { lazy } from 'react'\r\nimport locales from './locales'\r\nimport routes from './routes'\r\nimport getMenuItems from './menuItems'\r\nimport themes from './themes'\r\nimport parseLanguages from 'base-shell/lib/utils/locale'\r\n\r\nconst config = {\r\n  auth: {\r\n    signInURL: '/signin',\r\n  },\r\n  routes,\r\n  locale: {\r\n    locales,\r\n    defaultLocale: parseLanguages(['en', 'de', 'ru'], 'en'),\r\n    onError: (e) => {\r\n      //console.warn(e)\r\n\r\n      return\r\n    },\r\n  },\r\n  menu: {\r\n    getMenuItems,\r\n  },\r\n  theme: {\r\n    themes,\r\n    defaultThemeID: 'default',\r\n    defaultType: 'light',\r\n  },\r\n  pages: {\r\n    LandingPage: lazy(() => import('../pages/LandingPage/LandingPage')),\r\n    PageNotFound: lazy(() => import('../pages/PageNotFound/PageNotFound')),\r\n  },\r\n}\r\n\r\nexport default config\r\n","import React, { Component } from 'react'\r\nimport App from 'base-shell/lib'\r\nimport MUIConfig from 'material-ui-shell/lib'\r\nimport merge from 'base-shell/lib/utils/config'\r\nimport _config from './config'\r\n\r\nconst config = merge(MUIConfig, _config)\r\n\r\nexport default class Demo extends Component {\r\n  render() {\r\n    return <App config={config} />\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nrender(<App />, document.getElementById('root'))\r\n\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}